import * as React from 'react';
import { useState, useEffect, ChangeEvent } from 'react';
import { formatCurrency, parseLocale } from '@dreamplan/utils';
import { QuestionMarkCircleIcon, PencilIcon, ChevronDownIcon } from '@heroicons/react/24/outline';
import { getSession } from 'next-auth/react';
import useTranslation from 'next-translate/useTranslation';
import Image from 'next/image';
import { useRouter } from 'next/router';
import {
  StandardValuesInputContract,
  StandardValuesOutputContract,
  ExpenseGroup,
} from '../../packages/autogenerated-clients/src/budgetCalculationClient/calculationClient';
import { rpcClient } from '@helpers/trpc-client';
import { HandWithMoney, RetrieveInfoPicture } from 'components/Budget';
import RunningPig from 'components/Budget/runningPig';
import { AppTopNavigationBar } from 'components/Layout/AppNavigation';
import GirlWithPhone from 'components/Budget/GirlWithPhone';
interface Vehicle {
  type: [];
  id?: number;
  moreCars: string;
  moreCarsAmount: number;
  mileageGroup: string;
}
interface Children {
  childrenCheck?: string;
  childAmount?: number;
  childAge?: number;
  birthDate?: { year: number };
}

export default function MyApp() {
  const [mainExpense, setMainExpense] = useState(0);
  const [vehicleExpense, setVehicleExpense] = useState(0);
  const [childExpense, setChildExpense] = useState(0);
  const router = useRouter();

  const { lang } = useTranslation();
  const parsedLocale = parseLocale(lang);
  let passingObject = {};
  let dataCopy: ExpenseGroup[];
  async function fetchData() {
    const user = await getSession();
    if (user != null) {
      const response = await rpcClient.user.data.query({
        uid: user.user.id,
        attributes: {
          answers: true,
        },
      });
      return { ...response.answers };
    } else {
      throw new Error('User Unauthorized');
    }
  }
  fetchData();

  function calculateBudget(passingObject: StandardValuesInputContract) {
    return fetch('https://api-staging.dreamplan.io/api/CalculateStandardValues', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json-patch+json',
        Accept: 'application/json',
      },
      body: JSON.stringify(passingObject),
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error(response.statusText);
        }
        return response.json();
      })
      .then((data: StandardValuesOutputContract) => {
        dataCopy = data.expenseGroups || [];
        let localVehicleExpense = 0;
        let localChildExpense = 0;
        let localMainExpense = 0;

        dataCopy.forEach((expenseGroup) => {
          if (expenseGroup.expenses && expenseGroup.category === 'vehicle') {
            expenseGroup.expenses.forEach((expense) => {
              if (expense.amount && expense.amount.amount) {
                localVehicleExpense += expense.amount.amount / 12;
              }
            });
          }
          if (expenseGroup.expenses && expenseGroup.category === 'child') {
            expenseGroup.expenses.forEach((expense) => {
              if (expense.amount && expense.amount.amount) {
                localChildExpense += expense.amount.amount / 12;
              }
            });
          }
          if (expenseGroup.expenses && expenseGroup.category === 'other') {
            expenseGroup.expenses.forEach((expense) => {
              if (expense.amount && expense.amount.amount) {
                localMainExpense += expense.amount.amount / 12;
              }
            });
          }
        });
        setMainExpense(localMainExpense);
        setVehicleExpense(localVehicleExpense);
        setChildExpense(localChildExpense);
      })
      .catch((error) => {
        console.error('Error occurred during budget calculation:', error);
      });
  }

  const [userMonthlySalary, setUserMonthlySalary] = useState<number>(0);
  const [allVehicles, setAllVehicles] = useState<Vehicle[]>([]);

  function handleCarFormChange(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault();
    const target = event.target as HTMLFormElement;
    const { name } = target;
    const value = target.type === 'radio' ? target.value : Number(target.value);

    setAllVehicles((prevAllVehicles) => {
      const updatedVehicle = {
        ...prevAllVehicles[prevAllVehicles.length - 1],
        [name]: value,
      };

      return [...prevAllVehicles.slice(0, prevAllVehicles.length - 1), updatedVehicle];
    });
  }

  const [allChildren, setAllChildren] = useState<Children[]>([]);

  const [step, setStep] = useState<number>(1);
  const [step2, setStep2] = useState<number>(1);
  useEffect(() => {
    const displayQuestions = async (allVehicles: Vehicle[], allChildren: Children[]) => {
      if (typeof allVehicles[0]?.type === 'string' && allVehicles[0].type !== 'none') {
        setStep(2);
      }
      if (typeof allVehicles[0]?.type === 'string' && allVehicles[0].type === 'none') {
        setStep2(2);
      }
      if (allVehicles[0]?.mileageGroup) {
        setStep(3);
      }
      if (allVehicles[0]?.moreCars === 'yes') {
        setStep(4);
      }
      if (allVehicles[0]?.moreCars === 'no') {
        setStep2(2);
      }
    };

    displayQuestions(allVehicles, allChildren);
  }, [allVehicles, allChildren]);
  useEffect(() => {
    const displayQuestions2 = async (allVehicles: Vehicle[], allChildren: Children[]) => {
      if (allVehicles[0]?.moreCarsAmount >= 0) {
        setStep2(2);
      }
      if (allChildren[0]?.childrenCheck === 'yes') {
        setStep2(3);
      }
    };

    displayQuestions2(allVehicles, allChildren);
  }, [allVehicles, allChildren]);

  const handleChildFormChange = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    const target = event.target as HTMLFormElement;
    const { name, value } = target;
    setAllChildren((prevAllChildren) => {
      if (name.startsWith('childAge_')) {
        const index = Number(name.split('_')[1]);

        return prevAllChildren.map((child, i) => {
          if (i === index) {
            const childAge = Number(value);
            let childAgeGroup = 'adult';

            if (childAge >= 0 && childAge <= 3) {
              childAgeGroup = 'daycare';
            } else if (childAge >= 4 && childAge <= 6) {
              childAgeGroup = 'kindergarten';
            } else if (childAge >= 7 && childAge <= 14) {
              childAgeGroup = 'afterSchoolCare';
            }

            return {
              ...child,
              birthDate: {
                year: new Date().getFullYear() - childAge,
              },

              childAgeGroup: childAgeGroup,
            };
          }

          return child;
        });
      }

      if (name === 'childAmount' && Number(value) > prevAllChildren.length) {
        const newChildren = Array(Number(value) - prevAllChildren.length).fill({
          birthDate: { year: new Date().getFullYear() },
          childAgeGroup: '',
        });

        return [...prevAllChildren, ...newChildren];
      }
      if (name === 'childrenCheck') {
        return [
          {
            ...prevAllChildren[0],
            childrenCheck: value,
          },
          ...prevAllChildren.slice(1),
        ];
      }
      return prevAllChildren;
    });
  };

  async function processUserData() {
    const userData = await fetchData();
    const userMonthlySalaryObj = (
      userData as { answers: { key: string; value: any }[] }
    ).answers.find((answer) => answer.key === 'userMonthlySalary');

    if (userMonthlySalaryObj) {
      setUserMonthlySalary(userMonthlySalaryObj.value);
    } else {
      throw new Error('No userMonthlySalary found');
    }
    const userAge = userData?.answers?.find((item) => item.key === 'userAge')?.value;
    const spouseAge = userData?.answers?.find((item) => item.key === 'spouseAge')?.value;
    const vehicleArray = [];

    if (typeof allVehicles[0]?.moreCarsAmount === 'number' && allVehicles[0].moreCarsAmount > 0) {
      for (let i = 0; i < allVehicles[0].moreCarsAmount; i++) {
        vehicleArray.push({
          id: i + 1,
          type: 'mediumCar',
          mileageGroup: 'lessThan10000',
        });
      }
    }

    if (typeof userAge === 'number' && userAge > 0) {
      const birthYearPrimary = new Date().getFullYear() - userAge;
      const birthYearSpouse = new Date().getFullYear() - Number(spouseAge);
      passingObject = {
        standardValuesProfile: {
          primary: {
            birthDate: {
              year: birthYearPrimary,
            },
          },
          ...(spouseAge
            ? {
                spouse: {
                  birthDate: {
                    year: birthYearSpouse,
                  },
                },
              }
            : {}),

          ...(allChildren.length > 0
            ? {
                children: [...allChildren],
              }
            : {}),

          municipalityId: 165,
        },
        ...(typeof allVehicles[0]?.type === 'string' && allVehicles[0].type !== 'none'
          ? {
              vehicles: [...allVehicles, ...vehicleArray].map((vehicle, index) => ({
                id: index,
                ...vehicle,
              })),
            }
          : {}),
      };
    }
  }
  processUserData();
  function handleClick() {
    window.scrollTo({
      top: window.scrollY + 300,
      left: 0,
      behavior: 'smooth',
    });

    processUserData();
    calculateBudget(passingObject);
  }
  const carInput = [
    { value: 'smallCar', label: 'Small' },
    { value: 'mediumCar', label: 'Medium' },
    { value: 'largeCar', label: 'Big' },
    { value: 'motorcycle', label: 'Motorcycle' },
    { value: 'none', label: "I don't have a car" },
  ];
  const carMileageInput = [
    { value: 'lessThan10000', label: 'Under 10 000 km' },
    { value: 'lessThan20000', label: '10 000 - 20 000 km' },
    { value: 'lessThan30000', label: 'More than 20 000 km' },
  ];
  const moreCarsInput = [
    { value: 'yes', label: 'Yes' },
    { value: 'no', label: 'No' },
  ];
  const childrenCheckInput = [
    { value: 'yes', label: 'Yes' },
    { value: 'no', label: 'No' },
  ];
  type Expense = {
    id: string;
    name: string;
    value: number;
  };

  const [customExpenses, setCustomExpenses] = useState<Expense[]>([]);
  const [rangeValues, setRangeValues] = useState<RangeValues>({
    household: 1,
    children: 1,
    transport: 1,
  });
  const handleRangeChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    const newValue = Number(value);
    setRangeValues((prevValues) => ({
      ...prevValues,
      [name]: newValue,
    }));

    if (name === 'household') {
      setMainExpense(newValue);
    }
    if (name === 'children') {
      setChildExpense(newValue);
    }
    if (name === 'transport') {
      setVehicleExpense(newValue);
    }

    const customExpenseIndex = customExpenses.findIndex((expense) => expense.name === name);
    if (customExpenseIndex !== -1) {
      setCustomExpenses((prevCustomExpenses) => {
        const newCustomExpenses = [...prevCustomExpenses];
        newCustomExpenses[customExpenseIndex].value = newValue;
        return newCustomExpenses;
      });
    }
  };

  interface RangeValues {
    [key: string]: number;
  }

  useEffect(() => {
    setRangeValues((prevValues) => ({
      ...prevValues,
      household: mainExpense,
      children: childExpense,
      transport: vehicleExpense,
      ...customExpenses.reduce(
        (accumulator, currentExpense) => ({
          ...accumulator,
          [currentExpense.name]: currentExpense.value,
        }),
        {},
      ),
    }));
  }, [mainExpense, childExpense, vehicleExpense, customExpenses]);

  const addCustomExpense = () => {
    const name = prompt('Enter a name for the new custom expense');
    if (name) {
      setCustomExpenses([...customExpenses, { id: name, name: name, value: 0 }]);
    }
  };
  let incomeAfterDeduction = userMonthlySalary - userMonthlySalary * 0.38;
  let totalCustomExpenses = 0;
  for (let i = 0; i < customExpenses.length; i++) {
    if (customExpenses[i]) {
      totalCustomExpenses += customExpenses[i].value;
    }
  }

  let progressValue =
    (incomeAfterDeduction - mainExpense - childExpense - vehicleExpense - totalCustomExpenses) /
    incomeAfterDeduction;
  const [incomeUpdatedAfterDeduction, setUpdatedIncomeAfterDeduction] = useState(Number);
  const [userUpdatedMonthlySalary, setUpdatedUserMonthlySalary] = useState(Number);
  const [isEditable, setIsEditable] = useState(false);
  const [tempUserMonthlySalary, setTempUserMonthlySalary] = useState<number | null>(null);
  const [tempIncomeAfterDeduction, setTempIncomeAfterDeduction] = useState<number | null>(null);

  useEffect(() => {
    if (userMonthlySalary) {
      setTempUserMonthlySalary(userMonthlySalary);
    }
    if (incomeAfterDeduction) {
      setTempIncomeAfterDeduction(incomeAfterDeduction);
    }
  }, [userMonthlySalary, incomeAfterDeduction]);
  function handlePencilClick() {
    setTempIncomeAfterDeduction(incomeAfterDeduction);
    setTempUserMonthlySalary(userMonthlySalary);
    setIsEditable(true);
  }

  function handleSave(event: React.MouseEvent<HTMLButtonElement>) {
    event.preventDefault();
    setUpdatedIncomeAfterDeduction(tempIncomeAfterDeduction || 0);
    setUpdatedUserMonthlySalary(tempUserMonthlySalary || 0);
    setIsEditable(false);
  }
  const helpMessages = {
    household: 'Household expenses includes insurance, loans etc.',
    children: 'This is some helpful information about Children.',
    transport: 'This is some helpful information about Transport.',
  };
  const [visibleHelp, setVisibleHelp] = useState<string | null>(null);

  const toggleHelpVisible = (category: string) => {
    setVisibleHelp((prevCategory) => (prevCategory === category ? null : category));
  };

  const [isOpen, setIsOpen] = useState(false);

  const toggleVisibility = () => {
    setIsOpen(!isOpen);
  };
  const [chatStep, setChatStep] = useState(0);
  const nextStep = () => {
    setChatStep((prevStep) => prevStep + 1);
  };
  return (
    <section className="bg-dp-base mx-auto block  h-full  content-center px-2 ">
      <AppTopNavigationBar />
      {chatStep === 0 && (
        <section className="bg-dp-grayscale-100 flex flex-col items-center justify-center pt-16 text-center">
          <RunningPig width={298} height={159} className="mt-12" />
          <h1 className="pt-10">Budget</h1>
          <p>How are your expenses and what do you have left at the end of the month?</p>
          <p className="py-6"> Get answers and an overview here with Dreamplans budget.</p>
          <button className="bg-dp-coral mt-4 rounded-full p-2" onClick={nextStep}>
            Calculate for free here
          </button>

          <div className="flex gap-2 pt-12">
            <div className="bg-dp-darkerGray h-3 w-3 rounded-full"></div>
            <div className="bg-dp-bordergray h-3 w-3 rounded-full"></div>
            <div className=" bg-dp-bordergray h-3 w-3 rounded-full"></div>
            <div className="bg-dp-bordergray h-3 w-3 rounded-full"></div>
          </div>
        </section>
      )}

      {chatStep === 1 && (
        <section className="bg-dp-grayscale-100 mx-auto w-full pt-10  lg:max-w-5xl">
          {step >= 1 && (
            <div className="block py-3">
              <p className="bg-chat-primary mb-4 w-fit max-w-xl rounded-2xl rounded-bl-sm px-3 py-4   drop-shadow-sm ">
                What is the size of your vehicle?
              </p>
              <form
                className="bg-chat-primary mb-4 w-fit max-w-xl rounded-2xl rounded-bl-sm px-3 py-4   drop-shadow-sm "
                onChange={handleCarFormChange}
              >
                {carInput.map((input) => (
                  <label className="flex items-center gap-4" key={input.value}>
                    <input type="radio" name="type" className="block" value={input.value} />
                    {input.label}
                  </label>
                ))}
              </form>
              {step >= 2 && (
                <div className="flex justify-end">
                  <div className="bg-chat-tertiary rounded-2xl rounded-br-sm p-4 text-sm font-semibold text-white drop-shadow-sm">
                    <p>{allVehicles[0]?.type}</p>
                  </div>
                </div>
              )}
            </div>
          )}
          {step >= 2 && (
            <section className="block py-3">
              <p className="bg-chat-primary mb-4 w-fit max-w-xl rounded-2xl rounded-bl-sm px-3 py-4  text-sm drop-shadow-sm md:px-6">
                How much do you drive your car yearly?
              </p>
              <form
                className="bg-chat-primary mb-4 w-fit max-w-xl rounded-2xl rounded-bl-sm px-3 py-4   drop-shadow-sm "
                onChange={handleCarFormChange}
              >
                {carMileageInput.map((input) => (
                  <label className="flex items-center gap-4" key={input.value}>
                    <input type="radio" name="mileageGroup" className="block" value={input.value} />
                    {input.label}
                  </label>
                ))}
              </form>
              <div className="flex justify-end">
                <div className="bg-chat-tertiary rounded-2xl rounded-br-sm p-4 text-sm font-semibold text-white drop-shadow-sm">
                  <p>{allVehicles[0]?.mileageGroup}</p>
                </div>
              </div>
            </section>
          )}

          {step >= 3 && (
            <section className="block py-3">
              <p className="bg-chat-primary mb-4 w-fit max-w-xl rounded-2xl rounded-bl-sm px-3 py-4  text-sm drop-shadow-sm md:px-6">
                Do you have any more vehicles?
              </p>
              <form
                className="bg-chat-primary mb-4 w-fit max-w-xl rounded-2xl rounded-bl-sm px-3 py-4   drop-shadow-sm "
                onChange={handleCarFormChange}
              >
                {moreCarsInput.map((input) => (
                  <label className="flex items-center gap-4" key={input.value}>
                    <input type="radio" name="moreCars" className="block" value={input.value} />
                    {input.label}
                  </label>
                ))}
              </form>
              <div className="flex justify-end">
                <div className="bg-chat-tertiary rounded-2xl rounded-br-sm p-4 text-sm font-semibold text-white drop-shadow-sm">
                  <p>{allVehicles[0]?.moreCars}</p>
                </div>
              </div>
            </section>
          )}
          {step >= 4 && (
            <section className="block py-3">
              <form
                className="bg-chat-primary mb-4 w-fit max-w-xl rounded-2xl rounded-bl-sm px-3 py-4   drop-shadow-sm "
                onChange={handleCarFormChange}
              >
                <label className="block pt-2">
                  <p className="bg-chat-primary mb-4 w-fit max-w-xl rounded-2xl rounded-bl-sm px-3 py-4  text-sm drop-shadow-sm md:px-6">
                    How many more cars do you have?
                  </p>
                  <input type="number" className="block" name="moreCarsAmount" min="0" max="10" />
                </label>
              </form>
              <div className="flex justify-end">
                <div className="bg-chat-tertiary rounded-2xl rounded-br-sm p-4 text-sm font-semibold text-white drop-shadow-sm">
                  <p>{allVehicles[0]?.moreCarsAmount}</p>
                </div>
              </div>
            </section>
          )}
          {step2 >= 2 && (
            <section className="block py-2">
              <p className="bg-chat-primary mb-4 w-fit max-w-xl rounded-2xl rounded-bl-sm px-3 py-4  text-sm drop-shadow-sm md:px-6">
                Do you have any children?
              </p>
              <form
                className="bg-chat-primary mb-4 w-fit max-w-xl rounded-2xl rounded-bl-sm px-3 py-4   drop-shadow-sm "
                onChange={handleChildFormChange}
              >
                {childrenCheckInput.map((input) => (
                  <label className="flex items-center gap-4" key={input.value}>
                    <input type="radio" name="childrenCheck" value={input.value} />
                    {input.label}
                  </label>
                ))}
              </form>
              <div className="flex justify-end">
                <div className="bg-chat-tertiary rounded-2xl rounded-br-sm p-4 text-sm font-semibold text-white drop-shadow-sm">
                  <p>{allChildren[0]?.childrenCheck}</p>
                </div>
              </div>
            </section>
          )}
          {step2 >= 3 && (
            <section className="block py-2">
              <p className="bg-chat-primary mb-4 w-fit max-w-xl rounded-2xl rounded-bl-sm px-3 py-4  text-sm drop-shadow-sm md:px-6">
                How many children do you have?
              </p>
              <form
                className="bg-chat-primary mb-4 w-fit max-w-xl rounded-2xl rounded-bl-sm px-3 py-4  text-sm drop-shadow-sm md:px-6"
                onChange={handleChildFormChange}
              >
                <label>
                  <input type="number" name="childAmount" min="0" max="20" />
                </label>
                {allChildren.map((_, index) => (
                  <label className="block" key={index}>
                    What&apos;s the age of child {index + 1}?
                    <input type="number" name={`childAge_${index}`} min="0" max="18" />
                  </label>
                ))}
              </form>
              <div className="flex justify-end">
                <div className="bg-chat-tertiary rounded-2xl rounded-br-sm p-4 text-sm font-semibold text-white drop-shadow-sm">
                  <p>{allChildren[0]?.childAmount}</p>
                </div>
              </div>
            </section>
          )}

          <button
            className="bg-dp-coral mx-auto mt-4 flex rounded-full p-2"
            onClick={() => {
              handleClick();
              nextStep();
            }}
          >
            Calculate Budget
          </button>
          <div className="flex justify-center gap-2 pt-12">
            <div className="bg-dp-bordergray h-3 w-3 rounded-full"></div>
            <div className="bg-dp-darkerGray h-3 w-3 rounded-full"></div>
            <div className=" bg-dp-bordergray h-3 w-3 rounded-full"></div>
            <div className="bg-dp-bordergray h-3 w-3 rounded-full"></div>
          </div>
        </section>
      )}
      {chatStep === 2 && (
        <section className="bg-dp-grayscale-100 flex flex-col items-center pt-16 text-center">
          <RetrieveInfoPicture width={161} height={161} />
          <h1 className="pt-10">Retrieve your bank information</h1>
          <p className="pb-4">
            Log in with MitID on the next page to collect your banking informations quickly and
            automatically via our partner Keylane*
          </p>

          <button className="bg-dp-coral mt-4 rounded-full p-3 px-8" onClick={nextStep}>
            Log in with MitID
          </button>
          <p className="p-4">Return to chat</p>
          <div className="flex gap-2 pt-8">
            <div className="bg-dp-bordergray h-3 w-3 rounded-full"></div>
            <div className="bg-dp-bordergray h-3 w-3 rounded-full"></div>
            <div className=" bg-dp-darkerGray h-3 w-3 rounded-full"></div>
            <div className="bg-dp-bordergray h-3 w-3 rounded-full"></div>
          </div>
        </section>
      )}
      {chatStep === 3 && (
        <section className="bg-dp-grayscale-100 mx-auto flex w-fit flex-col items-center pt-16">
          <Image
            src="/images/mitIdImage.png"
            onClick={nextStep}
            alt="MitId"
            width={410}
            height={600}
            className="cursor-pointer"
          />
          <div className="flex justify-center gap-2 pt-8">
            <div className="bg-dp-bordergray h-3 w-3 rounded-full"></div>
            <div className="bg-dp-bordergray h-3 w-3 rounded-full"></div>
            <div className=" bg-dp-bordergray h-3 w-3 rounded-full"></div>
            <div className="bg-dp-darkerGray h-3 w-3 rounded-full"></div>
          </div>
        </section>
      )}
      {chatStep === 4 && (
        <section className="bg-dp-grayscale-100 flex  flex-col items-center pt-16 text-center">
          <h1>Information retrieval succesful</h1>
          <Image
            src="/svg\standard\success.svg"
            onClick={nextStep}
            alt="success"
            width={310}
            height={400}
          />
          <button className="bg-dp-coral mt-4 rounded-full p-2 px-4" onClick={nextStep}>
            Continue
          </button>
        </section>
      )}
      {chatStep === 5 && (
        <section className="mx-auto lg:max-w-5xl">
          <section className="bg-dp-grayscale-100 my-8 rounded-lg px-5 py-4 lg:px-40">
            <h1 className="flex justify-center p-0">Budget</h1>
            <p className="text-dp-xlarge-text py-4">
              Here is your personalized budget that we have calculated for you! 💸
            </p>

            <p>
              You can review your expenses, track what you have left at the end of each month, and
              if you wish, you can even further personalize this budget to suit your needs.
            </p>
          </section>
          <section className="bg-dp-grayscale-100 relative mb-8 justify-between rounded-lg border-8 border-[#90A89E] py-6 pl-5 lg:flex lg:px-40">
            <PencilIcon
              onClick={handlePencilClick}
              className="absolute right-5 h-6 w-6 cursor-pointer"
            />
            <div>
              <h2>Income before taxes</h2>
              {isEditable ? (
                <input
                  type="number"
                  value={tempUserMonthlySalary ? tempUserMonthlySalary : userMonthlySalary}
                  onChange={(e) => setTempUserMonthlySalary(Number(e.target.value))}
                />
              ) : (
                <p>{userUpdatedMonthlySalary || userMonthlySalary} kr</p>
              )}
              <hr className="border-dp-grayscale-500 w-5/6" />
            </div>
            <div>
              <h2>Income after taxes</h2>
              {isEditable ? (
                <input
                  type="number"
                  value={tempIncomeAfterDeduction ? tempIncomeAfterDeduction : incomeAfterDeduction}
                  onChange={(e) => setTempIncomeAfterDeduction(Number(e.target.value))}
                />
              ) : (
                <p>{incomeUpdatedAfterDeduction || incomeAfterDeduction} kr</p>
              )}
              <hr className="border-dp-grayscale-500 w-5/6" />
              {isEditable && (
                <button className="mt-4 rounded-xl bg-green-700 p-2" onClick={handleSave}>
                  Save
                </button>
              )}
            </div>
          </section>

          <section className="bg-dp-grayscale-100 rounded-lg border-8 border-[#90A89E] py-6 px-5 lg:px-40">
            <div className="pb-8">
              <p className="m flex justify-center pt-2 pb-2">Period: Months</p>
              <div className="mb-3 flex h-6 justify-center ">
                <div className="bg-dp-green rounded-l-full border-r border-black px-4 shadow-md">
                  1
                </div>
                <div className="bg-dp-lightGreen border-r border-black  px-4 shadow-md">3</div>
                <div className="bg-dp-lightGreen border-r border-black px-4 shadow-md">6</div>
                <div className="bg-dp-lightGreen rounded-r-full px-4  shadow-md">12</div>
              </div>
            </div>
            <div className="relative pb-4">
              <p className="text-dp-green bg-dp-grayscale-100 rounded-default border-dp-lightGray absolute bottom-3 right-0 w-fit justify-end border-2  px-3">
                {formatCurrency(
                  incomeAfterDeduction -
                    mainExpense -
                    childExpense -
                    vehicleExpense -
                    totalCustomExpenses,
                  parsedLocale,
                )}
              </p>
            </div>
            <div className="flex">
              <p className="w-72 text-lg">Available budget</p>
              <div className="h-4 w-full overflow-hidden rounded-3xl bg-gray-300">
                <div
                  className="h-full bg-green-500 transition-all duration-500"
                  style={{ width: `${progressValue * 100}%` }}
                />
              </div>
            </div>

            <p className="pb-3 text-gray-600">*Use the slider to adjust values.</p>
            <div className="grid grid-cols-2 pb-4">
              <div className="flex">
                <p>Household</p>
                <div>
                  <QuestionMarkCircleIcon
                    onClick={() => toggleHelpVisible('household')}
                    className="h-6 w-6 cursor-pointer"
                    stroke="#636363"
                  />
                  {visibleHelp === 'household' && (
                    <div className="absolute z-10 rounded-md bg-white p-2">
                      {helpMessages.household}
                    </div>
                  )}
                </div>
              </div>
              <p className="justify-self-end">{formatCurrency(mainExpense, parsedLocale)}</p>

              <input
                type="range"
                name="household"
                id="household"
                min={0}
                max={incomeAfterDeduction}
                step={100}
                value={mainExpense}
                onChange={handleRangeChange}
                className="col-span-2"
              />
            </div>
            <div className="grid grid-cols-2  pb-4">
              <div className="flex">
                <p>Children</p>
                <QuestionMarkCircleIcon
                  className="relative h-6 w-6 cursor-pointer"
                  stroke="#636363"
                />
              </div>
              <p className="justify-self-end">{formatCurrency(childExpense, parsedLocale)} </p>
              <input
                type="range"
                name="children"
                id="children"
                min={0}
                max={incomeAfterDeduction}
                step={100}
                value={childExpense}
                onChange={handleRangeChange}
                className="slider-thumb col-span-2"
              />
            </div>
            <div className="grid grid-cols-2 pb-4">
              <div className="flex">
                <p>Transport</p>
                <QuestionMarkCircleIcon
                  className="relative h-6 w-6 cursor-pointer"
                  stroke="#636363"
                />
              </div>
              <p className="justify-self-end">{formatCurrency(vehicleExpense, parsedLocale)} </p>
              <input
                type="range"
                name="transport"
                id="transport"
                min={0}
                max={incomeAfterDeduction}
                step={100}
                value={vehicleExpense}
                onChange={handleRangeChange}
                className="col-span-2"
              />
            </div>
            {customExpenses.map((expense) => (
              <div key={expense.id} className="grid grid-cols-2 pb-4">
                <p>{expense.name}</p>
                <p className="justify-self-end">{formatCurrency(expense.value, parsedLocale)}</p>
                <input
                  type="range"
                  name={expense.name}
                  id={expense.id}
                  min={0}
                  max={20000}
                  step={100}
                  value={expense.value}
                  onChange={handleRangeChange}
                  className="col-span-2"
                />
              </div>
            ))}
            <button
              onClick={addCustomExpense}
              className="bg-dp-darkBlue text-dp-grayscale-100 mx-auto flex rounded-xl p-2 px-4"
            >
              Add category
            </button>
          </section>
          <section className="bg-dp-grayscale-100 border-dp-coral relative mt-10 rounded-lg border-8 py-6 px-5 lg:px-40">
            <h2>Transactions</h2>
            <ChevronDownIcon
              stroke="#8E9197"
              strokeWidth="2"
              className="xxs:inset-y-4 absolute right-6 h-[26px] w-[26px] rotate-0 transition-transform duration-200 peer-checked:rotate-180 print:invisible md:inset-y-6"
              onClick={toggleVisibility}
            />
            <div className="flex justify-between pb-6">
              <h3 className="pb-1">Spent in may:</h3>
              <p className="text-dp-red  bg-dp-grayscale-100 border-dp-lightGray rounded-default 64 w-fit border-2  px-3">
                -6312 kr
              </p>
            </div>
            {isOpen && (
              <>
                <hr className="px2 mx-auto w-4/5 border-black" />
                <div className="flex justify-around py-4">
                  <div className=" w-20 content-center">
                    <p>15/05.2023</p>
                    <p className="flex justify-center">Fuel</p>
                  </div>
                  <p>545 kr.</p>
                </div>
                <div className="flex justify-around py-4">
                  <div className=" w-20 content-center">
                    <p>14/05.2023</p>
                    <p className="flex justify-center">Kindergarten</p>
                  </div>
                  <p>1.000 kr.</p>
                </div>
                <div className="flex justify-around py-4">
                  <div className=" w-20 content-center">
                    <p>13/05.2023</p>
                    <p className="flex justify-center">Rent</p>
                  </div>
                  <p>4.500 kr.</p>
                </div>
                <div className="flex justify-around py-4">
                  <div className=" w-20 content-center">
                    <p>15/05.2023</p>
                    <p className="flex justify-center">Fuel</p>
                  </div>
                  <p>267 kr.</p>
                </div>
              </>
            )}
          </section>
          <section className="bg-dp-grayscale-100 mt-8 flex flex-col items-center rounded-lg py-8 text-center">
            <h1>3 ways to minimize spendings </h1>
            <p className="py-4">Want to know how to better minimize spendings in budget?</p>
            <p>Read an article about how you in 3 ways can effeciently reduce your spendings.</p>
            <button
              className="bg-dp-coral text-dp-darkBlue my-6 flex-1 rounded-full border py-4 px-7 font-semibold "
              onClick={() => router.push(`/${router.locale}/artikler`)}
            >
              See article
            </button>
            <HandWithMoney width={297} height={244} />
          </section>
        </section>
      )}
    </section>
  );
}
